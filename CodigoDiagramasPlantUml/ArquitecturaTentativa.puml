@startuml
!theme plain

<style>
title {
  FontSize 20
  FontColor #333333
}
actor {
  BackgroundColor #FFFFFF
  BorderColor #1565C0
}
node {
  BackgroundColor #F5F5F5
  BorderColor #666666
  FontColor #333333
}
frame {
  BackgroundColor #E3F2FD
  BorderColor #1565C0
  FontName Arial
}
database {
  BackgroundColor #FFF9C4
  BorderColor #F57F17
}
component {
    BackgroundColor #FFFFFF
    BorderColor #1565C0
    FontColor #1A237E
    roundCorner 15
    shadowing true
}
</style>

title Arquitectura de Contenedores para PeluDog CRM

actor "Usuario Final\n(Navegador/App Móvil)" as User

node "Servidor Único (Host)" {
frame "Docker" {
component "Nginx\n(Reverse Proxy)" as Nginx

    node "Servicios de Aplicación" {
      component "Backend\n(Rails o Laravel)" as Backend
      component "Frontend\n(Expo for Web)" as Frontend
    }

    database "MySQL DB" as DB

}
}

User --> Nginx : Petición HTTP/HTTPS
Nginx --> Frontend : Sirve la aplicación web
Frontend -> Nginx : Peticiones a la API (ej. /api/citas)
Nginx --> Backend : Redirige peticiones /api/\*
Backend <--> DB : Lee y escribe datos (ORM)

note right of Nginx
**Punto de Entrada Único**

- Gestiona SSL
- Enruta a Frontend o Backend
  end note

note left of Backend
**Lógica de Negocio (API Only)**

- Framework: Rails (Ruby) o Laravel (PHP)
- API RESTful (JSON)
- Autenticación JWT
- Validaciones en Modelos
- (Decisión final en discusión)
  end note

note bottom of Frontend
**Capa de Presentación**

- UI: React con **Tailwind CSS**
- Lógica de UI en **Hooks**
- Notificaciones: **react-native-toast-message**
- Peticiones a API: **Axios**
  end note

note top of DB
**Persistencia de Datos**

- Volumen persistente
- Esquema estandarizado
- Gestionado por ORM (ActiveRecord/Eloquent)
  end note

note "El objetivo de la contenerización es permitir la **fácil replicación**\ncon mínima personalización para otras clínicas en Venezuela,\nmanteniendo una **estructura de datos común** que facilite\nla referencia de pacientes entre veterinarios." as Goal

@enduml
